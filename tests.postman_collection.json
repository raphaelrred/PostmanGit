{
	"info": {
		"_postman_id": "53c219df-d1da-47ac-bbbd-be8f20c73dcf",
		"name": "my tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29635417"
	},
	"item": [
		{
			"name": "https://stackoverflow.com/users/signup?ssrc=product_home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//11. Cookie exists\r",
							" pm.test(\"Cookie exists\", function(){\r",
							"     pm.cookies.has(\"prov\")\r",
							" })\r",
							"\r",
							" //12. Cookie has value\r",
							" pm.test(\"Cookie has value\", function(){\r",
							"     try{\r",
							"         var MY_COOKIE = pm.cookies.get(\"prov\");\r",
							"         console.log(MY_COOKIE);\r",
							"     } catch(e) {\r",
							"         console.log(\"SOME PROBLEM WHITH COOKIE ->\" + e)\r",
							"     }\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "stackoverflow.com"
					},
					{
						"key": "accept",
						"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
					},
					{
						"key": "accept-language",
						"value": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
					},
					{
						"key": "cache-control",
						"value": "max-age=0"
					},
					{
						"key": "cookie",
						"value": "prov=67faa3f1-3cb1-ccc6-8a9c-d3e103e6eb20; OptanonAlertBoxClosed=2023-09-08T16:07:38.891Z; OptanonConsent=isGpcEnabled=0&datestamp=Fri+Sep+08+2023+19%3A07%3A38+GMT%2B0300+(GMT%2B03%3A00)&version=6.37.0&isIABGlobal=false&hosts=&consentId=098b87c2-e0b0-4b10-90f7-e71794ef8092&interactionCount=1&landingPath=NotLandingPage&groups=C0001%3A1%2CC0003%3A0%2CC0004%3A0%2CC0002%3A0"
					},
					{
						"key": "dnt",
						"value": "1"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"116\", \"Not)A;Brand\";v=\"24\", \"Google Chrome\";v=\"116\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"Windows\""
					},
					{
						"key": "sec-fetch-dest",
						"value": "document"
					},
					{
						"key": "sec-fetch-mode",
						"value": "navigate"
					},
					{
						"key": "sec-fetch-site",
						"value": "none"
					},
					{
						"key": "sec-fetch-user",
						"value": "?1"
					},
					{
						"key": "upgrade-insecure-requests",
						"value": "1"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"
					}
				],
				"url": {
					"raw": "https://stackoverflow.com/users/signup?ssrc=product_home",
					"protocol": "https",
					"host": [
						"stackoverflow",
						"com"
					],
					"path": [
						"users",
						"signup"
					],
					"query": [
						{
							"key": "ssrc",
							"value": "product_home"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\",function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"    })\r",
							"\r",
							" //2.We have all declored fields in the response\r",
							" pm.test(\"Check that we have all declored fields\",function(){\r",
							"     const jsonData = pm.response.json()\r",
							"\r",
							"     pm.expect(jsonData).to.have.property(\"people\")\r",
							"     pm.expect(jsonData).to.have.property(\"planets\")\r",
							"     pm.expect(jsonData).to.have.property(\"films\")\r",
							"     pm.expect(jsonData).to.have.property(\"species\")\r",
							"     pm.expect(jsonData).to.have.property(\"vehicles\")\r",
							"     pm.expect(jsonData).to.have.property(\"starships\")\r",
							" })   \r",
							"\r",
							" //3.Field value isn't NULL\r",
							" pm.test(\"Check if value isn't NULL\",function(){\r",
							"     var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.people).not.equal(null);\r",
							"     pm.expect(jsonData.planets).not.equal(null);\r",
							"     pm.expect(jsonData.films).not.equal(null);\r",
							"     pm.expect(jsonData.species).not.equal(null);\r",
							"     pm.expect(jsonData.vehicles).not.equal(null);\r",
							"     pm.expect(jsonData.starships).not.equal(null);\r",
							" })\r",
							"\r",
							" //4. Check if value isn't empty\r",
							" pm.test(\"Check if value isn't empty\", function(){\r",
							"     var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.people).not.equal(\"\");\r",
							"     pm.expect(jsonData.planets).not.equal(\"\");\r",
							"     pm.expect(jsonData.films).not.equal(\"\");\r",
							"     pm.expect(jsonData.species).not.equal(\"\");\r",
							"     pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"     pm.expect(jsonData.starships).not.equal(\"\");\r",
							" })\r",
							"\r",
							" //5. Check if field corresponds to a specific value\r",
							" pm.test(\"Check if field corresponds to a specific value\", function(){\r",
							"     var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"     pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"     pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"     pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"     pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"     pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							" })\r",
							"\r",
							" //6.Status code is 200\r",
							" pm.test(\"Status code is 200\", function(){\r",
							"     pm.response.to.have.status(200)\r",
							" })\r",
							"\r",
							" //7. Status message is ok\r",
							" pm.test(\"Status message is ok\", function(){\r",
							"     pm.response.to.have.status(\"OK\");\r",
							" })\r",
							"\r",
							" //8. Response time is less 1000ms\r",
							" pm.test(\"Response time is less 1000ms\",function(){\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							" })\r",
							"\r",
							" //9. There is a specific header in the response\r",
							" pm.test(\"There is a specific header in the response\", function(){\r",
							"     pm.response.to.have.header(\"Content-Type\")\r",
							" })\r",
							"\r",
							" //10. The response has specific header with a specific value\r",
							" pm.test(\"The response has specific header with a specific value\", function(){\r",
							"     pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							" })\r",
							"\r",
							"\r",
							"\r",
							" \r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    // specify requires properties\r",
							"    \"required\": [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\":\"string\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"},\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Body is correst', function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\",\"homeworld\",\"films\",\"vehicles\",\"starships\"],\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"            },\r",
							"            \"vehicles\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"pm.test('Body is correst', function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	]
}